fun q -> substo (v varX) varX (v varY) q, 1 answer {
q=V ("y");
}
fun q -> evalo (abs varX (v varX)) q, 1 answer {
q=Abs ("x", V ("x"));
}
fun q -> evalo (abs varX (v varX)) q, 2 answers {
q=Abs ("x", V ("x"));
}
fun q -> evalo (app (abs varX (v varX)) (v varY)) q, 1 answer {
q=V ("y");
}
fun q -> evalo (app (abs varX (v varX)) q) (v varY), 1 answer {
q=V ("y");
}
fun q -> evalo (app (abs varX q) (v varY)) (v varY), 1 answer {
q=V ("x");
}
fun q -> evalo (app (v varX) (v varX)) q, 1 answer {
q=App (V ("x"), V ("x"));
}
fun q -> evalo (v varX) q, 1 answer {
q=V ("x");
}
fun q -> evalo (app q (v varX)) (v varX), 1 answer {
q=Abs (_.42, V (_.42));
}
fun q r -> evalo (app r q) (v varX), 1 answer {
q=V ("x"); r=Abs (_.52, V (_.52));
}
fun q r s -> a_la_quine q r s, 2 answers {
q=Abs (_.803, V (_.803)); r=Abs (_.803, V (_.803)); s=Abs (_.803, V (_.803));
q=Abs (_.1111, V (_.1111)); r=Abs (_.1111, Abs (_.1111, V (_.1111))); s=Abs (_.1111, Abs (_.1111, V (_.1111)));
}
